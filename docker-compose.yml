name: enclava

services:
  # Database migration service - runs once to apply migrations
  enclava-migrate:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://enclava_user:enclava_pass@enclava-postgres:5432/enclava_db
    depends_on:
      - enclava-postgres
    command: ["/usr/local/bin/migrate.sh"]
    volumes:
      - ./backend:/app
    networks:
      - enclava-net
    restart: "no"  # Run once and exit

  # Main application backend
  enclava-backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://enclava_user:enclava_pass@enclava-postgres:5432/enclava_db
      - REDIS_URL=redis://enclava-redis:6379
      - QDRANT_HOST=enclava-qdrant
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-here}
      - PRIVATEMODE_API_KEY=${PRIVATEMODE_API_KEY:-}
      - ADMIN_USER=${ADMIN_USER:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin123}
      - LOG_LLM_PROMPTS=${LOG_LLM_PROMPTS:-false}
    depends_on:
      - enclava-migrate
      - enclava-postgres
      - enclava-redis
      - enclava-qdrant
      - privatemode-proxy
    ports:
      - "58000:8000"
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
      - ./plugins:/plugins
    networks:
      - enclava-net
    restart: unless-stopped

  # Next.js frontend
  enclava-frontend:
    image: node:18-alpine
    working_dir: /app
    command: sh -c "npm install && npm run dev"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:58000
      - NEXT_PUBLIC_WS_URL=ws://localhost:58000
      - INTERNAL_API_URL=http://enclava-backend:8000
    depends_on:
      - enclava-backend
    ports:
      - "53000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - enclava-net
    restart: unless-stopped

  # PostgreSQL database
  enclava-postgres:
    image: postgres:16
    environment:
      - POSTGRES_DB=enclava_db
      - POSTGRES_USER=enclava_user
      - POSTGRES_PASSWORD=enclava_pass
    volumes:
      - enclava-postgres-data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    networks:
      - enclava-net
    restart: unless-stopped

  # Redis for caching and message queue
  enclava-redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - enclava-redis-data:/data
    networks:
      - enclava-net
    restart: unless-stopped

  # Ollama Free Model Proxy
  #enclava-ollama-proxy:
  #  build: 
  #    context: /home/lio/cloud/code/ollama-free-model-proxy
  #    dockerfile: Dockerfile
  #  environment:
  #    - OPENAI_API_KEY=${OPENROUTER_API_KEY}
  #    - FREE_MODE=true
  #    - TOOL_USE_ONLY=false
  #  volumes:
  #    - enclava-ollama-data:/data
  #  working_dir: /data
  #  networks:
  #    - enclava-net
  #  restart: unless-stopped
    #healthcheck:
    #  test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:11434/"]
    #  interval: 30s
    #  timeout: 10s
    #  retries: 3
    #  start_period: 40s

  # Qdrant vector database
  enclava-qdrant:
    image: qdrant/qdrant:latest
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    ports:
      - "56333:6333"  # HTTP API and Web Interface
      - "56334:6334"  # GRPC API (optional)
    volumes:
      - enclava-qdrant-data:/qdrant/storage
    networks:
      - enclava-net
    restart: unless-stopped

  # Privatemode.ai service (optional - for confidential models)
  privatemode-proxy:
    image: ghcr.io/edgelesssys/privatemode/privatemode-proxy:latest
    environment:
      - PRIVATEMODE_API_KEY=${PRIVATEMODE_API_KEY:-}
      - PRIVATEMODE_CACHE_MODE=${PRIVATEMODE_CACHE_MODE:-none}
      - PRIVATEMODE_CACHE_SALT=${PRIVATEMODE_CACHE_SALT:-}
    entrypoint: ["/bin/privatemode-proxy"]
    command: [
      "--apiKey=${PRIVATEMODE_API_KEY}",
      "--port=8080"
    ]
    ports:
      - "58080:8080"
    networks:
      - enclava-net
    restart: unless-stopped

volumes:
  enclava-postgres-data:
  enclava-redis-data:
  enclava-qdrant-data:
#  enclava-ollama-data:

networks:
  enclava-net:
    driver: bridge
